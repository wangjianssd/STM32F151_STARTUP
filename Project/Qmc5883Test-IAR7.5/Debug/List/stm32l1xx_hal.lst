###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       21/Sep/2016  16:57:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal.c
#    Command line =  
#        D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal.c
#        -D USE_HAL_DRIVER -D STM32L151xD -lC
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -lA
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -o
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Apps/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Core\CMSIS\RTOS\Template\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/RTT\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../BSP/Inc/\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -Ol
#    List file    =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List\stm32l1xx_hal.lst
#    Object file  =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj\stm32l1xx_hal.o
#
###############################################################################

D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_hal.c
      4            * @author  MCD Application Team
      5            * @version V1.2.0
      6            * @date    01-July-2016
      7            * @brief   HAL module driver.
      8            *          This is the common part of the HAL initialization
      9            *
     10            @verbatim
     11            ==============================================================================
     12                               ##### How to use this driver #####
     13            ==============================================================================
     14              [..]
     15              The common HAL driver contains a set of generic and common APIs that can be
     16              used by the PPP peripheral drivers and the user to start using the HAL. 
     17              [..]
     18              The HAL contains two APIs' categories: 
     19                   (+) Common HAL APIs
     20                   (+) Services HAL APIs
     21          
     22            @endverbatim
     23            ******************************************************************************
     24            * @attention
     25            *
     26            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     27            *
     28            * Redistribution and use in source and binary forms, with or without modification,
     29            * are permitted provided that the following conditions are met:
     30            *   1. Redistributions of source code must retain the above copyright notice,
     31            *      this list of conditions and the following disclaimer.
     32            *   2. Redistributions in binary form must reproduce the above copyright notice,
     33            *      this list of conditions and the following disclaimer in the documentation
     34            *      and/or other materials provided with the distribution.
     35            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     36            *      may be used to endorse or promote products derived from this software
     37            *      without specific prior written permission.
     38            *
     39            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     40            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     41            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     42            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     43            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     44            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     45            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     46            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     47            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     48            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     49            *
     50            ******************************************************************************
     51            */
     52          
     53          /* Includes ------------------------------------------------------------------*/
     54          #include "stm32l1xx_hal.h"
     55          
     56          /** @addtogroup STM32L1xx_HAL_Driver
     57            * @{
     58            */
     59          
     60          /** @defgroup HAL HAL
     61            * @brief HAL module driver.
     62            * @{
     63            */
     64          
     65          #ifdef HAL_MODULE_ENABLED
     66          
     67          /* Private typedef -----------------------------------------------------------*/
     68          /* Private define ------------------------------------------------------------*/
     69          
     70          /** @defgroup HAL_Private_Defines HAL Private Defines
     71            * @{
     72            */
     73          
     74          /**
     75           * @brief STM32L1xx HAL Driver version number
     76             */
     77          #define __STM32L1xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
     78          #define __STM32L1xx_HAL_VERSION_SUB1   (0x02) /*!< [23:16] sub1 version */
     79          #define __STM32L1xx_HAL_VERSION_SUB2   (0x00) /*!< [15:8]  sub2 version */
     80          #define __STM32L1xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
     81          #define __STM32L1xx_HAL_VERSION         ((__STM32L1xx_HAL_VERSION_MAIN << 24)\
     82                                                  |(__STM32L1xx_HAL_VERSION_SUB1 << 16)\
     83                                                  |(__STM32L1xx_HAL_VERSION_SUB2 << 8 )\
     84                                                  |(__STM32L1xx_HAL_VERSION_RC))
     85          
     86          #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
     87          
     88          /**
     89            * @}
     90            */
     91          
     92          /* Private macro -------------------------------------------------------------*/
     93          /* Private variables ---------------------------------------------------------*/
     94          
     95          /** @defgroup HAL_Private_Variables HAL Private Variables
     96            * @{
     97            */
     98          

   \                                 In section .bss, align 4
     99          __IO uint32_t uwTick;
   \                     uwTick:
   \   00000000                      DS8 4
    100          
    101          /**
    102            * @}
    103            */
    104          
    105          /* Private function prototypes -----------------------------------------------*/
    106          /* Private functions ---------------------------------------------------------*/
    107          
    108          /** @defgroup HAL_Exported_Functions HAL Exported Functions
    109            * @{
    110            */
    111          
    112          /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
    113           *  @brief    Initialization and de-initialization functions
    114           *
    115          @verbatim
    116           ===============================================================================
    117                        ##### Initialization and de-initialization functions #####
    118           ===============================================================================
    119             [..]  This section provides functions allowing to:
    120                (+) Initializes the Flash interface, the NVIC allocation and initial clock 
    121                    configuration. It initializes the source of time base also when timeout 
    122                    is needed and the backup domain when enabled.
    123                (+) de-Initializes common part of the HAL.
    124                (+) Configure The time base source to have 1ms time base with a dedicated 
    125                    Tick interrupt priority. 
    126                  (++) Systick timer is used by default as source of time base, but user 
    127                       can eventually implement his proper time base source (a general purpose 
    128                       timer for example or other time source), keeping in mind that Time base 
    129                       duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
    130                       handled in milliseconds basis.
    131                  (++) Time base configuration function (HAL_InitTick ()) is called automatically 
    132                       at the beginning of the program after reset by HAL_Init() or at any time 
    133                       when clock is configured, by HAL_RCC_ClockConfig(). 
    134                  (++) Source of time base is configured  to generate interrupts at regular 
    135                       time intervals. Care must be taken if HAL_Delay() is called from a 
    136                       peripheral ISR process, the Tick interrupt line must have higher priority 
    137                      (numerically lower) than the peripheral interrupt. Otherwise the caller 
    138                      ISR process will be blocked. 
    139                 (++) functions affecting time base configurations are declared as __Weak  
    140                       to make  override possible  in case of other  implementations in user file.
    141           
    142          @endverbatim
    143            * @{
    144            */
    145          
    146          /**
    147            * @brief This function configures the Flash prefetch, 
    148            *        Configures time base source, NVIC and Low level hardware
    149            * @note This function is called at the beginning of program after reset and before 
    150            *       the clock configuration
    151            * @note The time base configuration is based on MSI clock when exiting from Reset.
    152            *       Once done, time base tick start incrementing.
    153            *        In the default implementation,Systick is used as source of time base.
    154            *        the tick variable is incremented each 1ms in its ISR.
    155            * @retval HAL status
    156            */

   \                                 In section .text, align 2, keep-with-next
    157          HAL_StatusTypeDef HAL_Init(void)
    158          {
   \                     HAL_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    159            /* Configure Flash prefetch */
    160          #if (PREFETCH_ENABLE != 0)
    161            __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    162          #endif /* PREFETCH_ENABLE */
    163          
    164            /* Set Interrupt Group Priority */
    165            HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       HAL_NVIC_SetPriorityGrouping
    166          
    167            /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
    168            HAL_InitTick(TICK_INT_PRIORITY);
   \   00000008   0x200F             MOVS     R0,#+15
   \   0000000A   0x.... 0x....      BL       HAL_InitTick
    169          
    170            /* Init the low level hardware */
    171            HAL_MspInit();
   \   0000000E   0x.... 0x....      BL       HAL_MspInit
    172          
    173            /* Return function status */
    174            return HAL_OK;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    175          }
    176          
    177          /**
    178            * @brief This function de-Initializes common part of the HAL and stops the source
    179            *        of time base.
    180            * @note This function is optional.
    181            * @retval HAL status
    182            */

   \                                 In section .text, align 2, keep-with-next
    183          HAL_StatusTypeDef HAL_DeInit(void)
    184          {
   \                     HAL_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    185            /* Reset of all peripherals */
    186            __HAL_RCC_APB1_FORCE_RESET();
   \   00000002   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000006   0x....             LDR.N    R1,??DataTable13  ;; 0x40023818
   \   00000008   0x6008             STR      R0,[R1, #+0]
    187            __HAL_RCC_APB1_RELEASE_RESET();
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable13  ;; 0x40023818
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    188          
    189            __HAL_RCC_APB2_FORCE_RESET();
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000014   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40023814
   \   00000016   0x6008             STR      R0,[R1, #+0]
    190            __HAL_RCC_APB2_RELEASE_RESET();
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable13_1  ;; 0x40023814
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    191          
    192            __HAL_RCC_AHB_FORCE_RESET();
   \   0000001E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000022   0x....             LDR.N    R1,??DataTable13_2  ;; 0x40023810
   \   00000024   0x6008             STR      R0,[R1, #+0]
    193            __HAL_RCC_AHB_RELEASE_RESET();
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable13_2  ;; 0x40023810
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    194          
    195            /* De-Init the low level hardware */
    196            HAL_MspDeInit();
   \   0000002C   0x.... 0x....      BL       HAL_MspDeInit
    197              
    198            /* Return function status */
    199            return HAL_OK;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD02             POP      {R1,PC}          ;; return
    200          }
    201          
    202          /**
    203            * @brief  Initializes the MSP.
    204            * @retval None
    205            */

   \                                 In section .text, align 2, keep-with-next
    206          __weak void HAL_MspInit(void)
    207          {
    208            /* NOTE : This function Should not be modified, when the callback is needed,
    209                      the HAL_MspInit could be implemented in the user file
    210             */
    211          }
   \                     HAL_MspInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    212          
    213          /**
    214            * @brief  DeInitializes the MSP.
    215            * @retval None
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          __weak void HAL_MspDeInit(void)
    218          {
    219            /* NOTE : This function Should not be modified, when the callback is needed,
    220                      the HAL_MspDeInit could be implemented in the user file
    221             */
    222          }
   \                     HAL_MspDeInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    223          
    224          /**
    225            * @brief This function configures the source of the time base. 
    226            *        The time source is configured  to have 1ms time base with a dedicated 
    227            *        Tick interrupt priority.
    228            * @note This function is called  automatically at the beginning of program after
    229            *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
    230            * @note In the default implementation, SysTick timer is the source of time base. 
    231            *       It is used to generate interrupts at regular time intervals. 
    232            *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
    233            *       The the SysTick interrupt must have higher priority (numerically lower) 
    234            *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
    235            *       The function is declared as __Weak  to be overwritten  in case of other
    236            *       implementation  in user file.
    237            * @param TickPriority: Tick interrupt priority.
    238            * @retval HAL status
    239            */

   \                                 In section .text, align 2, keep-with-next
    240          __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
    241          {
   \                     HAL_InitTick: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    242            /*Configure the SysTick to have interrupt in 1ms time basis*/
    243            HAL_SYSTICK_Config(SystemCoreClock /1000);
   \   00000004   0x....             LDR.N    R0,??DataTable13_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x.... 0x....      BL       HAL_SYSTICK_Config
    244          
    245            /*Configure the SysTick IRQ priority */
    246            HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_SetPriority
    247          
    248             /* Return function status */
    249            return HAL_OK;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    250          }
    251          
    252          /**
    253            * @}
    254            */
    255          
    256          /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
    257           *  @brief    HAL Control functions
    258           *
    259          @verbatim
    260           ===============================================================================
    261                                ##### HAL Control functions #####
    262           ===============================================================================
    263              [..]  This section provides functions allowing to:
    264                (+) Provide a tick value in millisecond
    265                (+) Provide a blocking delay in millisecond
    266                (+) Suspend the time base source interrupt
    267                (+) Resume the time base source interrupt
    268                (+) Get the HAL API driver version
    269                (+) Get the device identifier
    270                (+) Get the device revision identifier
    271                (+) Enable/Disable Debug module during Sleep mode
    272                (+) Enable/Disable Debug module during STOP mode
    273                (+) Enable/Disable Debug module during STANDBY mode
    274                
    275          @endverbatim
    276            * @{
    277            */
    278          
    279          /**
    280            * @brief This function is called to increment  a global variable "uwTick"
    281            *        used as application time base.
    282            * @note In the default implementation, this variable is incremented each 1ms
    283            *       in Systick ISR.
    284           * @note This function is declared as __weak to be overwritten in case of other 
    285            *      implementations in user file.
    286            * @retval None
    287            */

   \                                 In section .text, align 2, keep-with-next
    288          __weak void HAL_IncTick(void)
    289          {
    290            uwTick++;
   \                     HAL_IncTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable13_4
   \   00000008   0x6008             STR      R0,[R1, #+0]
    291          }
   \   0000000A   0x4770             BX       LR               ;; return
    292          
    293          /**
    294            * @brief Provides a tick value in millisecond.
    295            * @note This function is declared as __weak to be overwritten in case of other 
    296            *       implementations in user file.
    297            * @retval tick value
    298            */

   \                                 In section .text, align 2, keep-with-next
    299          __weak uint32_t HAL_GetTick(void)
    300          {
    301            return uwTick;
   \                     HAL_GetTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    302          }
    303          
    304          /**
    305            * @brief This function provides accurate delay (in milliseconds) based 
    306            *        on variable incremented.
    307            * @note In the default implementation , SysTick timer is the source of time base.
    308            *       It is used to generate interrupts at regular time intervals where uwTick
    309            *       is incremented.
    310            * @note ThiS function is declared as __weak to be overwritten in case of other
    311            *       implementations in user file.
    312            * @param Delay: specifies the delay time length, in milliseconds.
    313            * @retval None
    314            */

   \                                 In section .text, align 2, keep-with-next
    315          __weak void HAL_Delay(__IO uint32_t Delay)
    316          {
   \                     HAL_Delay: (+1)
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    317            uint32_t tickstart = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    318            tickstart = HAL_GetTick();
   \   00000006   0x.... 0x....      BL       HAL_GetTick
   \   0000000A   0x0004             MOVS     R4,R0
    319            while((HAL_GetTick() - tickstart) < Delay)
   \                     ??HAL_Delay_0: (+1)
   \   0000000C   0x.... 0x....      BL       HAL_GetTick
   \   00000010   0x1B00             SUBS     R0,R0,R4
   \   00000012   0x9901             LDR      R1,[SP, #+4]
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD3F9             BCC.N    ??HAL_Delay_0
    320            {
    321            }
    322          }
   \   00000018   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    323          
    324          /**
    325            * @brief Suspend Tick increment.
    326            * @note In the default implementation , SysTick timer is the source of time base. It is
    327            *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
    328            *       is called, the the SysTick interrupt will be disabled and so Tick increment 
    329            *       is suspended.
    330            * @note This function is declared as __weak to be overwritten in case of other
    331            *       implementations in user file.
    332            * @retval None
    333            */

   \                                 In section .text, align 2, keep-with-next
    334          __weak void HAL_SuspendTick(void)
    335          {
    336            /* Disable SysTick Interrupt */
    337            CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
   \                     HAL_SuspendTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_5  ;; 0xe000e010
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable13_5  ;; 0xe000e010
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    338          }
   \   0000000C   0x4770             BX       LR               ;; return
    339          
    340          /**
    341            * @brief Resume Tick increment.
    342            * @note In the default implementation , SysTick timer is the source of time base. It is
    343            *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
    344            *       is called, the the SysTick interrupt will be enabled and so Tick increment 
    345            *       is resumed.
    346            * @note This function is declared as __weak to be overwritten in case of other
    347            *       implementations in user file.
    348            * @retval None
    349            */

   \                                 In section .text, align 2, keep-with-next
    350          __weak void HAL_ResumeTick(void)
    351          {
    352            /* Enable SysTick Interrupt */
    353            SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
   \                     HAL_ResumeTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_5  ;; 0xe000e010
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable13_5  ;; 0xe000e010
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    354          }
   \   0000000C   0x4770             BX       LR               ;; return
    355          
    356          /**
    357            * @brief Returns the HAL revision
    358            * @retval version: 0xXYZR (8bits for each decimal, R for RC)
    359            */

   \                                 In section .text, align 2, keep-with-next
    360          uint32_t HAL_GetHalVersion(void)
    361          {
    362           return __STM32L1xx_HAL_VERSION;
   \                     HAL_GetHalVersion: (+1)
   \   00000000   0xF05F 0x7081      MOVS     R0,#+16908288
   \   00000004   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /**
    366            * @brief Returns the device revision identifier.
    367            * @retval Device revision identifier
    368            */

   \                                 In section .text, align 2, keep-with-next
    369          uint32_t HAL_GetREVID(void)
    370          {
    371            return((DBGMCU->IDCODE) >> 16);
   \                     HAL_GetREVID: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_6  ;; 0xe0042000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0C00             LSRS     R0,R0,#+16
   \   00000006   0x4770             BX       LR               ;; return
    372          }
    373          
    374          /**
    375            * @brief  Returns the device identifier.
    376            * @retval Device identifier
    377            */

   \                                 In section .text, align 2, keep-with-next
    378          uint32_t HAL_GetDEVID(void)
    379          {
    380             return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
   \                     HAL_GetDEVID: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_6  ;; 0xe0042000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000006   0x0D00             LSRS     R0,R0,#+20
   \   00000008   0x4770             BX       LR               ;; return
    381          }
    382          
    383          /**
    384            * @brief  Enable the Debug Module during SLEEP mode
    385            * @retval None
    386            */

   \                                 In section .text, align 2, keep-with-next
    387          void HAL_DBGMCU_EnableDBGSleepMode(void)
    388          {
    389            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
   \                     HAL_DBGMCU_EnableDBGSleepMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    390          }
   \   0000000C   0x4770             BX       LR               ;; return
    391          
    392          /**
    393            * @brief  Disable the Debug Module during SLEEP mode
    394            * @retval None
    395            */

   \                                 In section .text, align 2, keep-with-next
    396          void HAL_DBGMCU_DisableDBGSleepMode(void)
    397          {
    398            CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
   \                     HAL_DBGMCU_DisableDBGSleepMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0840             LSRS     R0,R0,#+1
   \   00000006   0x0040             LSLS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    399          }
   \   0000000C   0x4770             BX       LR               ;; return
    400          
    401          /**
    402            * @brief  Enable the Debug Module during STOP mode
    403            * @retval None
    404            */

   \                                 In section .text, align 2, keep-with-next
    405          void HAL_DBGMCU_EnableDBGStopMode(void)
    406          {
    407            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
   \                     HAL_DBGMCU_EnableDBGStopMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    408          }
   \   0000000C   0x4770             BX       LR               ;; return
    409          
    410          /**
    411            * @brief  Disable the Debug Module during STOP mode
    412            * @retval None
    413            */

   \                                 In section .text, align 2, keep-with-next
    414          void HAL_DBGMCU_DisableDBGStopMode(void)
    415          {
    416            CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
   \                     HAL_DBGMCU_DisableDBGStopMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    417          }
   \   0000000C   0x4770             BX       LR               ;; return
    418          
    419          /**
    420            * @brief  Enable the Debug Module during STANDBY mode
    421            * @retval None
    422            */

   \                                 In section .text, align 2, keep-with-next
    423          void HAL_DBGMCU_EnableDBGStandbyMode(void)
    424          {
    425            SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
   \                     HAL_DBGMCU_EnableDBGStandbyMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    426          }
   \   0000000C   0x4770             BX       LR               ;; return
    427          
    428          /**
    429            * @brief  Disable the Debug Module during STANDBY mode
    430            * @retval None
    431            */

   \                                 In section .text, align 2, keep-with-next
    432          void HAL_DBGMCU_DisableDBGStandbyMode(void)
    433          {
    434            CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
   \                     HAL_DBGMCU_DisableDBGStandbyMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_7  ;; 0xe0042004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe0042004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    435          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023818         DC32     0x40023818

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40023814         DC32     0x40023814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x40023810         DC32     0x40023810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     uwTick

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0xE0042000         DC32     0xe0042000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0xE0042004         DC32     0xe0042004
    436          
    437          /**
    438            * @}
    439            */
    440          
    441          /**
    442            * @}
    443            */
    444          
    445          #endif /* HAL_MODULE_ENABLED */
    446          /**
    447            * @}
    448            */
    449          
    450          /**
    451            * @}
    452            */
    453          
    454          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_DBGMCU_DisableDBGSleepMode
       0   HAL_DBGMCU_DisableDBGStandbyMode
       0   HAL_DBGMCU_DisableDBGStopMode
       0   HAL_DBGMCU_EnableDBGSleepMode
       0   HAL_DBGMCU_EnableDBGStandbyMode
       0   HAL_DBGMCU_EnableDBGStopMode
       8   HAL_DeInit
         8   -> HAL_MspDeInit
      16   HAL_Delay
        16   -> HAL_GetTick
       0   HAL_GetDEVID
       0   HAL_GetHalVersion
       0   HAL_GetREVID
       0   HAL_GetTick
       0   HAL_IncTick
       8   HAL_Init
         8   -> HAL_InitTick
         8   -> HAL_MspInit
         8   -> HAL_NVIC_SetPriorityGrouping
       8   HAL_InitTick
         8   -> HAL_NVIC_SetPriority
         8   -> HAL_SYSTICK_Config
       0   HAL_MspDeInit
       0   HAL_MspInit
       0   HAL_ResumeTick
       0   HAL_SuspendTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
      14  HAL_DBGMCU_DisableDBGSleepMode
      14  HAL_DBGMCU_DisableDBGStandbyMode
      14  HAL_DBGMCU_DisableDBGStopMode
      14  HAL_DBGMCU_EnableDBGSleepMode
      14  HAL_DBGMCU_EnableDBGStandbyMode
      14  HAL_DBGMCU_EnableDBGStopMode
      52  HAL_DeInit
      26  HAL_Delay
      10  HAL_GetDEVID
       6  HAL_GetHalVersion
       8  HAL_GetREVID
       6  HAL_GetTick
      12  HAL_IncTick
      22  HAL_Init
      36  HAL_InitTick
       2  HAL_MspDeInit
       2  HAL_MspInit
      14  HAL_ResumeTick
      14  HAL_SuspendTick
       4  uwTick

 
   4 bytes in section .bss
 326 bytes in section .text
 
 326 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
