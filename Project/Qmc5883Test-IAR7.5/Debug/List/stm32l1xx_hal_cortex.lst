###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       21/Sep/2016  16:57:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_cortex.c
#    Command line =  
#        D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_cortex.c
#        -D USE_HAL_DRIVER -D STM32L151xD -lC
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -lA
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -o
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Apps/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Core\CMSIS\RTOS\Template\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/RTT\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../BSP/Inc/\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -Ol
#    List file    =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List\stm32l1xx_hal_cortex.lst
#    Object file  =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj\stm32l1xx_hal_cortex.o
#
###############################################################################

D:\01work\proj\地磁\Code\Drivers\Core\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_cortex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_hal_cortex.c
      4            * @author  MCD Application Team
      5            * @version V1.2.0
      6            * @date    01-July-2016
      7            * @brief   CORTEX HAL module driver.
      8            *
      9            *          This file provides firmware functions to manage the following
     10            *          functionalities of the CORTEX:
     11            *           + Initialization and de-initialization functions
     12            *           + Peripheral Control functions
     13            *          
     14            *  @verbatim    
     15            ==============================================================================
     16                                  ##### How to use this driver #####
     17            ==============================================================================
     18          
     19              [..]  
     20              *** How to configure Interrupts using Cortex HAL driver ***
     21              ===========================================================
     22              [..]     
     23              This section provide functions allowing to configure the NVIC interrupts (IRQ).
     24              The Cortex-M3 exceptions are managed by CMSIS functions.
     25             
     26              (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping()
     27                  function according to the following table.
     28          
     29               The table below gives the allowed values of the pre-emption priority and subpriority according
     30               to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function.
     31                 ==========================================================================================================================
     32                   NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     33                 ==========================================================================================================================
     34                  NVIC_PRIORITYGROUP_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     35                                        |                                   |                             | 4 bits for subpriority
     36                 --------------------------------------------------------------------------------------------------------------------------
     37                  NVIC_PRIORITYGROUP_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     38                                        |                                   |                             | 3 bits for subpriority
     39                 --------------------------------------------------------------------------------------------------------------------------    
     40                  NVIC_PRIORITYGROUP_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     41                                        |                                   |                             | 2 bits for subpriority
     42                 --------------------------------------------------------------------------------------------------------------------------    
     43                  NVIC_PRIORITYGROUP_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     44                                        |                                   |                             | 1 bits for subpriority
     45                 --------------------------------------------------------------------------------------------------------------------------    
     46                  NVIC_PRIORITYGROUP_4  |                0-15               |            0                | 4 bits for pre-emption priority
     47                                        |                                   |                             | 0 bits for subpriority                       
     48                 ==========================================================================================================================
     49               (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
     50          
     51               (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
     52                
     53          
     54               -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible. 
     55                   The pending IRQ priority will be managed only by the sub priority.
     56             
     57               -@- IRQ priority order (sorted by highest to lowest priority):
     58                  (+@) Lowest pre-emption priority
     59                  (+@) Lowest sub priority
     60                  (+@) Lowest hardware priority (IRQ number)
     61           
     62              [..]  
     63              *** How to configure Systick using Cortex HAL driver ***
     64              ========================================================
     65              [..]
     66              Setup SysTick Timer for 1 msec interrupts.
     67                     
     68             (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
     69                 is a CMSIS function that:
     70                  (++) Configures the SysTick Reload register with value passed as function parameter.
     71                  (++) Configures the SysTick IRQ priority to the lowest value (0x0F).
     72                  (++) Resets the SysTick Counter register.
     73                  (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
     74                  (++) Enables the SysTick Interrupt.
     75                  (++) Starts the SysTick Counter.
     76              
     77             (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
     78                 __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
     79                 HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
     80                 inside the stm32l1xx_hal_cortex.h file.
     81          
     82             (+) You can change the SysTick IRQ priority by calling the
     83                 HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function 
     84                 call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.
     85          
     86             (+) To adjust the SysTick time base, use the following formula:
     87                                      
     88                 Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
     89                 (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
     90                 (++) Reload Value should not exceed 0xFFFFFF
     91             
     92            @endverbatim
     93            ******************************************************************************
     94            * @attention
     95            *
     96            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     97            *
     98            * Redistribution and use in source and binary forms, with or without modification,
     99            * are permitted provided that the following conditions are met:
    100            *   1. Redistributions of source code must retain the above copyright notice,
    101            *      this list of conditions and the following disclaimer.
    102            *   2. Redistributions in binary form must reproduce the above copyright notice,
    103            *      this list of conditions and the following disclaimer in the documentation
    104            *      and/or other materials provided with the distribution.
    105            *   3. Neither the name of STMicroelectronics nor the names of its contributors
    106            *      may be used to endorse or promote products derived from this software
    107            *      without specific prior written permission.
    108            *
    109            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    110            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    111            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    112            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    113            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    114            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    115            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    116            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    117            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    118            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    119            *
    120            ******************************************************************************
    121            */
    122          
    123          /* Includes ------------------------------------------------------------------*/
    124          #include "stm32l1xx_hal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriorityGrouping(uint32_t)
   \                     NVIC_SetPriorityGrouping: (+1)
   \   00000000   0xF010 0x0107      ANDS     R1,R0,#0x7
   \   00000004   0x....             LDR.N    R0,??DataTable13  ;; 0xe000ed0c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF64F 0x02FF      MOVW     R2,#+63743
   \   0000000C   0x4010             ANDS     R0,R2,R0
   \   0000000E   0x....             LDR.N    R2,??DataTable13_1  ;; 0x5fa0000
   \   00000010   0xEA52 0x2101      ORRS     R1,R2,R1, LSL #+8
   \   00000014   0x4308             ORRS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable13  ;; 0xe000ed0c
   \   00000018   0x6008             STR      R0,[R1, #+0]
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPriorityGrouping(void)
   \                     NVIC_GetPriorityGrouping: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13  ;; 0xe000ed0c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable13_2  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable13_3  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPendingIRQ(IRQn_Type)
   \                     NVIC_GetPendingIRQ: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable13_4  ;; 0xe000e200
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0942             LSRS     R2,R0,#+5
   \   00000006   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0x40C1             LSRS     R1,R1,R0
   \   00000010   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPendingIRQ(IRQn_Type)
   \                     NVIC_SetPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable13_4  ;; 0xe000e200
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     NVIC_ClearPendingIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable13_5  ;; 0xe000e280
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetActive(IRQn_Type)
   \                     NVIC_GetActive: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable13_6  ;; 0xe000e300
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0942             LSRS     R2,R0,#+5
   \   00000006   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0x40C1             LSRS     R1,R1,R0
   \   00000010   0xF011 0x0001      ANDS     R0,R1,#0x1
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000006   0x0109             LSLS     R1,R1,#+4
   \   00000008   0x....             LDR.N    R2,??DataTable13_7  ;; 0xe000ed18
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000010   0x1880             ADDS     R0,R0,R2
   \   00000012   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000016   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   00000018   0x0109             LSLS     R1,R1,#+4
   \   0000001A   0x....             LDR.N    R2,??DataTable13_8  ;; 0xe000e400
   \   0000001C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001E   0x5481             STRB     R1,[R0, R2]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_GetPriority(IRQn_Type)
   \                     NVIC_GetPriority: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD508             BPL.N    ??NVIC_GetPriority_0
   \   00000006   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe000ed18
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000000E   0x1840             ADDS     R0,R0,R1
   \   00000010   0xF810 0x0C04      LDRB     R0,[R0, #-4]
   \   00000014   0x0900             LSRS     R0,R0,#+4
   \   00000016   0xE003             B.N      ??NVIC_GetPriority_1
   \                     ??NVIC_GetPriority_0: (+1)
   \   00000018   0x....             LDR.N    R1,??DataTable13_8  ;; 0xe000e400
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x5C40             LDRB     R0,[R0, R1]
   \   0000001E   0x0900             LSRS     R0,R0,#+4
   \                     ??NVIC_GetPriority_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0: (+1)
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1: (+1)
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2: (+1)
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3: (+1)
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DecodePriority(uint32_t, uint32_t, uint32_t *const, uint32_t *const)
   \                     NVIC_DecodePriority: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0xF011 0x0107      ANDS     R1,R1,#0x7
   \   00000006   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \   0000000A   0x2C05             CMP      R4,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_DecodePriority_0
   \   0000000E   0x2404             MOVS     R4,#+4
   \   00000010   0xE001             B.N      ??NVIC_DecodePriority_1
   \                     ??NVIC_DecodePriority_0: (+1)
   \   00000012   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \                     ??NVIC_DecodePriority_1: (+1)
   \   00000016   0x1D0D             ADDS     R5,R1,#+4
   \   00000018   0x2D07             CMP      R5,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_DecodePriority_2
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xE000             B.N      ??NVIC_DecodePriority_3
   \                     ??NVIC_DecodePriority_2: (+1)
   \   00000020   0x1EC9             SUBS     R1,R1,#+3
   \                     ??NVIC_DecodePriority_3: (+1)
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x40CD             LSRS     R5,R5,R1
   \   00000026   0x2601             MOVS     R6,#+1
   \   00000028   0xFA16 0xF404      LSLS     R4,R6,R4
   \   0000002C   0x1E64             SUBS     R4,R4,#+1
   \   0000002E   0x402C             ANDS     R4,R4,R5
   \   00000030   0x6014             STR      R4,[R2, #+0]
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0xFA12 0xF101      LSLS     R1,R2,R1
   \   00000038   0x1E49             SUBS     R1,R1,#+1
   \   0000003A   0x4008             ANDS     R0,R1,R0
   \   0000003C   0x6018             STR      R0,[R3, #+0]
   \   0000003E   0xBC70             POP      {R4-R6}
   \   00000040   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SystemReset(void)
   \                     NVIC_SystemReset: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0x....             LDR.N    R0,??DataTable13  ;; 0xe000ed0c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000000C   0x....             LDR.N    R1,??DataTable13_9  ;; 0x5fa0004
   \   0000000E   0x4308             ORRS     R0,R1,R0
   \   00000010   0x....             LDR.N    R1,??DataTable13  ;; 0xe000ed0c
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0xF3BF 0x8F4F      DSB      
   \                     ??NVIC_SystemReset_0: (+1)
   \   00000018   0xBF00             Nop      
   \   0000001A   0xE7FD             B.N      ??NVIC_SystemReset_0

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x1E41             SUBS     R1,R0,#+1
   \   00000004   0xF1B1 0x7F80      CMP      R1,#+16777216
   \   00000008   0xD301             BCC.N    ??SysTick_Config_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable13_10  ;; 0xe000e014
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x210F             MOVS     R1,#+15
   \   00000016   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001A   0x.... 0x....      BL       NVIC_SetPriority
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable13_11  ;; 0xe000e018
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0x2007             MOVS     R0,#+7
   \   00000026   0x....             LDR.N    R1,??DataTable13_12  ;; 0xe000e010
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
    125          
    126          /** @addtogroup STM32L1xx_HAL_Driver
    127            * @{
    128            */
    129          
    130          /** @defgroup CORTEX CORTEX
    131            * @brief CORTEX HAL module driver
    132            * @{
    133            */
    134          
    135          #ifdef HAL_CORTEX_MODULE_ENABLED
    136          
    137          /* Private typedef -----------------------------------------------------------*/
    138          /* Private define ------------------------------------------------------------*/
    139          /* Private macro -------------------------------------------------------------*/
    140          /* Private variables ---------------------------------------------------------*/
    141          /* Private function prototypes -----------------------------------------------*/
    142          /* Private functions ---------------------------------------------------------*/
    143          
    144          /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
    145            * @{
    146            */
    147          
    148          
    149          /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
    150           *  @brief    Initialization and Configuration functions 
    151           *
    152          @verbatim    
    153            ==============================================================================
    154                        ##### Initialization and de-initialization functions #####
    155            ==============================================================================
    156              [..]
    157                This section provide the Cortex HAL driver functions allowing to configure Interrupts
    158                Systick functionalities 
    159          
    160          @endverbatim
    161            * @{
    162            */
    163          
    164          
    165          /**
    166            * @brief  Sets the priority grouping field (pre-emption priority and subpriority)
    167            *         using the required unlock sequence.
    168            * @param  PriorityGroup: The priority grouping bits length. 
    169            *         This parameter can be one of the following values:
    170            *         @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
    171            *                                    4 bits for subpriority
    172            *         @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
    173            *                                    3 bits for subpriority
    174            *         @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
    175            *                                    2 bits for subpriority
    176            *         @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
    177            *                                    1 bits for subpriority
    178            *         @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
    179            *                                    0 bits for subpriority
    180            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    181            *         The pending IRQ priority will be managed only by the subpriority. 
    182            * @retval None
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
    185          {
   \                     HAL_NVIC_SetPriorityGrouping: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    186            /* Check the parameters */
    187            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    188            
    189            /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    190            NVIC_SetPriorityGrouping(PriorityGroup);
   \   00000002   0x.... 0x....      BL       NVIC_SetPriorityGrouping
    191          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    192          
    193          /**
    194            * @brief  Sets the priority of an interrupt.
    195            * @param  IRQn: External interrupt number
    196            *         This parameter can be an enumerator of IRQn_Type enumeration
    197            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
    198            * @param  PreemptPriority: The pre-emption priority for the IRQn channel.
    199            *         This parameter can be a value between 0 and 15
    200            *         A lower priority value indicates a higher priority 
    201            * @param  SubPriority: the subpriority level for the IRQ channel.
    202            *         This parameter can be a value between 0 and 15
    203            *         A lower priority value indicates a higher priority.          
    204            * @retval None
    205            */

   \                                 In section .text, align 2, keep-with-next
    206          void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
    207          {
   \                     HAL_NVIC_SetPriority: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    208            uint32_t prioritygroup = 0x00;
   \   00000008   0x2000             MOVS     R0,#+0
    209            
    210            /* Check the parameters */
    211            assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    212            assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
    213            
    214            prioritygroup = NVIC_GetPriorityGrouping();
   \   0000000A   0x.... 0x....      BL       NVIC_GetPriorityGrouping
    215            
    216            NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
   \   0000000E   0x0032             MOVS     R2,R6
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x.... 0x....      BL       NVIC_EncodePriority
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       NVIC_SetPriority
    217          }
   \   00000020   0xBD70             POP      {R4-R6,PC}       ;; return
    218          
    219          /**
    220            * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
    221            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    222            *         function should be called before. 
    223            * @param  IRQn External interrupt number
    224            *         This parameter can be an enumerator of IRQn_Type enumeration
    225            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
    226            * @retval None
    227            */

   \                                 In section .text, align 2, keep-with-next
    228          void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
    229          {
   \                     HAL_NVIC_EnableIRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    230            /* Check the parameters */
    231            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    232            
    233            /* Enable interrupt */
    234            NVIC_EnableIRQ(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_EnableIRQ
    235          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    236          
    237          /**
    238            * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
    239            * @param  IRQn External interrupt number
    240            *         This parameter can be an enumerator of IRQn_Type enumeration
    241            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
    242            * @retval None
    243            */

   \                                 In section .text, align 2, keep-with-next
    244          void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
    245          {
   \                     HAL_NVIC_DisableIRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    246            /* Check the parameters */
    247            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    248            
    249            /* Disable interrupt */
    250            NVIC_DisableIRQ(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_DisableIRQ
    251          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    252          
    253          /**
    254            * @brief  Initiates a system reset request to reset the MCU.
    255            * @retval None
    256            */

   \                                 In section .text, align 2, keep-with-next
    257          void HAL_NVIC_SystemReset(void)
    258          {
   \                     HAL_NVIC_SystemReset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    259            /* System Reset */
    260            NVIC_SystemReset();
   \   00000002   0x.... 0x....      BL       NVIC_SystemReset
    261          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    262          
    263          /**
    264            * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
    265            *         Counter is in free running mode to generate periodic interrupts.
    266            * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
    267            * @retval status:  - 0  Function succeeded.
    268            *                  - 1  Function failed.
    269            */

   \                                 In section .text, align 2, keep-with-next
    270          uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
    271          {
   \                     HAL_SYSTICK_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    272             return SysTick_Config(TicksNumb);
   \   00000002   0x.... 0x....      BL       SysTick_Config
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    273          }
    274          /**
    275            * @}
    276            */
    277          
    278          /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
    279           *  @brief    Cortex control functions 
    280           *
    281          @verbatim   
    282            ==============================================================================
    283                                ##### Peripheral Control functions #####
    284            ==============================================================================
    285              [..]
    286                This subsection provides a set of functions allowing to control the CORTEX
    287                (NVIC, SYSTICK, MPU) functionalities. 
    288           
    289                
    290          @endverbatim
    291            * @{
    292            */
    293          
    294          #if (__MPU_PRESENT == 1)
    295          /**
    296            * @brief  Initializes and configures the Region and the memory to be protected.
    297            * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
    298            *                the initialization and configuration information.
    299            * @retval None
    300            */

   \                                 In section .text, align 2, keep-with-next
    301          void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
    302          {
    303            /* Check the parameters */
    304            assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
    305            assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
    306          
    307            /* Set the Region number */
    308            MPU->RNR = MPU_Init->Number;
   \                     HAL_MPU_ConfigRegion: (+1)
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x....             LDR.N    R2,??DataTable13_13  ;; 0xe000ed98
   \   00000004   0x6011             STR      R1,[R2, #+0]
    309          
    310            if ((MPU_Init->Enable) != RESET)
   \   00000006   0x7801             LDRB     R1,[R0, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD01E             BEQ.N    ??HAL_MPU_ConfigRegion_0
    311            {
    312              /* Check the parameters */
    313              assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
    314              assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
    315              assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
    316              assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
    317              assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    318              assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    319              assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    320              assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    321              
    322              MPU->RBAR = MPU_Init->BaseAddress;
   \   0000000C   0x6841             LDR      R1,[R0, #+4]
   \   0000000E   0x....             LDR.N    R2,??DataTable13_14  ;; 0xe000ed9c
   \   00000010   0x6011             STR      R1,[R2, #+0]
    323              MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
    324                          ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
    325                          ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
    326                          ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
    327                          ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
    328                          ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
    329                          ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
    330                          ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
    331                          ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
   \   00000012   0x7B01             LDRB     R1,[R0, #+12]
   \   00000014   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000016   0x0612             LSLS     R2,R2,#+24
   \   00000018   0xEA52 0x7101      ORRS     R1,R2,R1, LSL #+28
   \   0000001C   0x7A82             LDRB     R2,[R0, #+10]
   \   0000001E   0xEA51 0x41C2      ORRS     R1,R1,R2, LSL #+19
   \   00000022   0x7B42             LDRB     R2,[R0, #+13]
   \   00000024   0xEA51 0x4182      ORRS     R1,R1,R2, LSL #+18
   \   00000028   0x7B82             LDRB     R2,[R0, #+14]
   \   0000002A   0xEA51 0x4142      ORRS     R1,R1,R2, LSL #+17
   \   0000002E   0x7BC2             LDRB     R2,[R0, #+15]
   \   00000030   0xEA51 0x4102      ORRS     R1,R1,R2, LSL #+16
   \   00000034   0x7A42             LDRB     R2,[R0, #+9]
   \   00000036   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   0000003A   0x7A02             LDRB     R2,[R0, #+8]
   \   0000003C   0xEA51 0x0142      ORRS     R1,R1,R2, LSL #+1
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x4308             ORRS     R0,R0,R1
   \   00000044   0x....             LDR.N    R1,??DataTable13_15  ;; 0xe000eda0
   \   00000046   0x6008             STR      R0,[R1, #+0]
   \   00000048   0xE005             B.N      ??HAL_MPU_ConfigRegion_1
    332            }
    333            else
    334            {
    335              MPU->RBAR = 0x00;
   \                     ??HAL_MPU_ConfigRegion_0: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable13_14  ;; 0xe000ed9c
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    336              MPU->RASR = 0x00;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable13_15  ;; 0xe000eda0
   \   00000054   0x6008             STR      R0,[R1, #+0]
    337            }
    338          }
   \                     ??HAL_MPU_ConfigRegion_1: (+1)
   \   00000056   0x4770             BX       LR               ;; return
    339          #endif /* __MPU_PRESENT */
    340          
    341          /**
    342            * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
    343            * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
    344            */

   \                                 In section .text, align 2, keep-with-next
    345          uint32_t HAL_NVIC_GetPriorityGrouping(void)
    346          {
   \                     HAL_NVIC_GetPriorityGrouping: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    347            /* Get the PRIGROUP[10:8] field value */
    348            return NVIC_GetPriorityGrouping();
   \   00000002   0x.... 0x....      BL       NVIC_GetPriorityGrouping
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    349          }
    350          
    351          /**
    352            * @brief  Gets the priority of an interrupt.
    353            * @param  IRQn: External interrupt number
    354            *         This parameter can be an enumerator of IRQn_Type enumeration
    355            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))
    356            * @param   PriorityGroup: the priority grouping bits length.
    357            *         This parameter can be one of the following values:
    358            *           @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
    359            *                                      4 bits for subpriority
    360            *           @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
    361            *                                      3 bits for subpriority
    362            *           @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
    363            *                                      2 bits for subpriority
    364            *           @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
    365            *                                      1 bits for subpriority
    366            *           @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
    367            *                                      0 bits for subpriority
    368            * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
    369            * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
    370            * @retval None
    371            */

   \                                 In section .text, align 2, keep-with-next
    372          void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
    373          {
   \                     HAL_NVIC_GetPriority: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    374            /* Check the parameters */
    375            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    376           /* Get priority for Cortex-M system or device specific interrupts */
    377            NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       NVIC_GetPriority
   \   0000000E   0x0033             MOVS     R3,R6
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x.... 0x....      BL       NVIC_DecodePriority
    378          }
   \   00000018   0xBD70             POP      {R4-R6,PC}       ;; return
    379          
    380          /**
    381            * @brief  Sets Pending bit of an external interrupt.
    382            * @param  IRQn External interrupt number
    383            *         This parameter can be an enumerator of IRQn_Type enumeration
    384            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
    385            * @retval None
    386            */

   \                                 In section .text, align 2, keep-with-next
    387          void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
    388          { 
   \                     HAL_NVIC_SetPendingIRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    389            /* Set interrupt pending */
    390            NVIC_SetPendingIRQ(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_SetPendingIRQ
    391          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    392          
    393          /**
    394            * @brief Gets Pending Interrupt (reads the pending register in the NVIC 
    395            *         and returns the pending bit for the specified interrupt).
    396            * @param IRQn External interrupt number
    397            *         This parameter can be an enumerator of IRQn_Type enumeration
    398            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
    399            * @retval status: - 0  Interrupt status is not pending.
    400            *                 - 1  Interrupt status is pending.
    401            */

   \                                 In section .text, align 2, keep-with-next
    402          uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
    403          { 
   \                     HAL_NVIC_GetPendingIRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    404            /* Return 1 if pending else 0 */
    405            return NVIC_GetPendingIRQ(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_GetPendingIRQ
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    406          }
    407          
    408          /**
    409            * @brief Clears the pending bit of an external interrupt.
    410            * @param IRQn External interrupt number
    411            *         This parameter can be an enumerator of IRQn_Type enumeration
    412            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
    413            * @retval None
    414            */

   \                                 In section .text, align 2, keep-with-next
    415          void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
    416          { 
   \                     HAL_NVIC_ClearPendingIRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    417            /* Clear pending interrupt */
    418            NVIC_ClearPendingIRQ(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    419          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    420          
    421          /**
    422            * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
    423            * @param IRQn External interrupt number
    424            *         This parameter can be an enumerator of IRQn_Type enumeration
    425            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
    426            * @retval status: - 0  Interrupt status is not pending.
    427            *                 - 1  Interrupt status is pending.
    428            */

   \                                 In section .text, align 2, keep-with-next
    429          uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
    430          { 
   \                     HAL_NVIC_GetActive: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    431            /* Return 1 if active else 0 */
    432            return NVIC_GetActive(IRQn);
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       NVIC_GetActive
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    433          }
    434          
    435          /**
    436            * @brief  Configures the SysTick clock source.
    437            * @param  CLKSource: specifies the SysTick clock source.
    438            *         This parameter can be one of the following values:
    439            *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
    440            *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
    441            * @retval None
    442            */

   \                                 In section .text, align 2, keep-with-next
    443          void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
    444          {
    445            /* Check the parameters */
    446            assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
    447            if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
   \                     HAL_SYSTICK_CLKSourceConfig: (+1)
   \   00000000   0x2804             CMP      R0,#+4
   \   00000002   0xD106             BNE.N    ??HAL_SYSTICK_CLKSourceConfig_0
    448            {
    449              SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
   \   00000004   0x....             LDR.N    R0,??DataTable13_12  ;; 0xe000e010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000000C   0x....             LDR.N    R1,??DataTable13_12  ;; 0xe000e010
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0xE005             B.N      ??HAL_SYSTICK_CLKSourceConfig_1
    450            }
    451            else
    452            {
    453              SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
   \                     ??HAL_SYSTICK_CLKSourceConfig_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable13_12  ;; 0xe000e010
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000001A   0x....             LDR.N    R1,??DataTable13_12  ;; 0xe000e010
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    454            }
    455          }
   \                     ??HAL_SYSTICK_CLKSourceConfig_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    456          
    457          /**
    458            * @brief  This function handles SYSTICK interrupt request.
    459            * @retval None
    460            */

   \                                 In section .text, align 2, keep-with-next
    461          void HAL_SYSTICK_IRQHandler(void)
    462          {
   \                     HAL_SYSTICK_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    463            HAL_SYSTICK_Callback();
   \   00000002   0x.... 0x....      BL       HAL_SYSTICK_Callback
    464          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    465          
    466          /**
    467            * @brief  SYSTICK callback.
    468            * @retval None
    469            */

   \                                 In section .text, align 2, keep-with-next
    470          __weak void HAL_SYSTICK_Callback(void)
    471          {
    472            /* NOTE : This function Should not be modified, when the callback is needed,
    473                      the HAL_SYSTICK_Callback could be implemented in the user file
    474             */
    475          }
   \                     HAL_SYSTICK_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0xE000E300         DC32     0xe000e300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x05FA0004         DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0xE000ED98         DC32     0xe000ed98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0xE000ED9C         DC32     0xe000ed9c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0xE000EDA0         DC32     0xe000eda0
    476          
    477          /**
    478            * @}
    479            */
    480          
    481          /**
    482            * @}
    483            */
    484          
    485          #endif /* HAL_CORTEX_MODULE_ENABLED */
    486          /**
    487            * @}
    488            */
    489          
    490          /**
    491            * @}
    492            */
    493          
    494          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_MPU_ConfigRegion
       8   HAL_NVIC_ClearPendingIRQ
         8   -> NVIC_ClearPendingIRQ
       8   HAL_NVIC_DisableIRQ
         8   -> NVIC_DisableIRQ
       8   HAL_NVIC_EnableIRQ
         8   -> NVIC_EnableIRQ
       8   HAL_NVIC_GetActive
         8   -> NVIC_GetActive
       8   HAL_NVIC_GetPendingIRQ
         8   -> NVIC_GetPendingIRQ
      16   HAL_NVIC_GetPriority
        16   -> NVIC_DecodePriority
        16   -> NVIC_GetPriority
       8   HAL_NVIC_GetPriorityGrouping
         8   -> NVIC_GetPriorityGrouping
       8   HAL_NVIC_SetPendingIRQ
         8   -> NVIC_SetPendingIRQ
      16   HAL_NVIC_SetPriority
        16   -> NVIC_EncodePriority
        16   -> NVIC_GetPriorityGrouping
        16   -> NVIC_SetPriority
       8   HAL_NVIC_SetPriorityGrouping
         8   -> NVIC_SetPriorityGrouping
       8   HAL_NVIC_SystemReset
         8   -> NVIC_SystemReset
       0   HAL_SYSTICK_CLKSourceConfig
       0   HAL_SYSTICK_Callback
       8   HAL_SYSTICK_Config
         8   -> SysTick_Config
       8   HAL_SYSTICK_IRQHandler
         8   -> HAL_SYSTICK_Callback
       0   NVIC_ClearPendingIRQ
      12   NVIC_DecodePriority
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       4   NVIC_EncodePriority
       0   NVIC_GetActive
       0   NVIC_GetPendingIRQ
       0   NVIC_GetPriority
       0   NVIC_GetPriorityGrouping
       0   NVIC_SetPendingIRQ
       0   NVIC_SetPriority
       0   NVIC_SetPriorityGrouping
       0   NVIC_SystemReset
       8   SysTick_Config
         8   -> NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      88  HAL_MPU_ConfigRegion
      10  HAL_NVIC_ClearPendingIRQ
      10  HAL_NVIC_DisableIRQ
      10  HAL_NVIC_EnableIRQ
      10  HAL_NVIC_GetActive
      10  HAL_NVIC_GetPendingIRQ
      26  HAL_NVIC_GetPriority
       8  HAL_NVIC_GetPriorityGrouping
      10  HAL_NVIC_SetPendingIRQ
      34  HAL_NVIC_SetPriority
       8  HAL_NVIC_SetPriorityGrouping
       8  HAL_NVIC_SystemReset
      32  HAL_SYSTICK_CLKSourceConfig
       2  HAL_SYSTICK_Callback
       8  HAL_SYSTICK_Config
       8  HAL_SYSTICK_IRQHandler
      20  NVIC_ClearPendingIRQ
      66  NVIC_DecodePriority
      20  NVIC_DisableIRQ
      20  NVIC_EnableIRQ
      62  NVIC_EncodePriority
      22  NVIC_GetActive
      22  NVIC_GetPendingIRQ
      34  NVIC_GetPriority
      10  NVIC_GetPriorityGrouping
      20  NVIC_SetPendingIRQ
      34  NVIC_SetPriority
      28  NVIC_SetPriorityGrouping
      28  NVIC_SystemReset
      46  SysTick_Config

 
 778 bytes in section .text
 
 778 bytes of CODE memory

Errors: none
Warnings: none
