###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       21/Sep/2016  16:57:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\01work\proj\地磁\Code\Drivers\Src\clock.c
#    Command line =  
#        D:\01work\proj\地磁\Code\Drivers\Src\clock.c -D USE_HAL_DRIVER -D
#        STM32L151xD -lC
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -lA
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List -o
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Apps/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\Core\CMSIS\RTOS\Template\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Config\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/FreeRTOS/Source/include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Include\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/RTT\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers\
#        -I D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../BSP/Inc/\
#        -I
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5/../../Drivers/Core/CMSIS/Device/ST/STM32L1xx/Include\
#        -Ol
#    List file    =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\List\clock.lst
#    Object file  =  
#        D:\01work\proj\地磁\Code\Project\Qmc5883Test-IAR7.5\Debug\Obj\clock.o
#
###############################################################################

D:\01work\proj\地磁\Code\Drivers\Src\clock.c
      1          /**
      2           * @brief       : 
      3           *
      4           * @file        : clock.c
      5           * @author      : wangjian
      6           *
      7           * Version      : v0.0.1
      8           * Date         : 2016/09/21
      9           * Change Logs  :
     10           *
     11           * Date          Version      Author        Notes
     12           * 2016/09/21    v0.0.1        wangjian    first version
     13           */
     14          /* Exported includes _--------------------------------------------------------*/
     15          #include "device.h"
     16          
     17          /* Exported functions --------------------------------------------------------*/
     18          /** System Clock Configuration
     19          */

   \                                 In section .text, align 4, keep-with-next
     20          bool ClockInit(void)
     21          {
   \                     ClockInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
     22            RCC_OscInitTypeDef RCC_OscInitStruct;
     23            RCC_ClkInitTypeDef RCC_ClkInitStruct;
     24            RCC_PeriphCLKInitTypeDef PeriphClkInit;
     25          
     26            __HAL_RCC_PWR_CLK_ENABLE();
   \   00000004   0x4830             LDR.N    R0,??ClockInit_0  ;; 0x40023824
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000C   0x492E             LDR.N    R1,??ClockInit_0  ;; 0x40023824
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x482D             LDR.N    R0,??ClockInit_0  ;; 0x40023824
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
     27          
     28            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   \   0000001C   0x482B             LDR.N    R0,??ClockInit_0+0x4  ;; 0x40007000
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x50C0      BICS     R0,R0,#0x1800
   \   00000024   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000028   0x4928             LDR.N    R1,??ClockInit_0+0x4  ;; 0x40007000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     29          
     30            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
     31                                        |RCC_OSCILLATORTYPE_LSE;
   \   0000002C   0x200E             MOVS     R0,#+14
   \   0000002E   0x9008             STR      R0,[SP, #+32]
     32            RCC_OscInitStruct.LSEState = RCC_LSE_ON;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x900A             STR      R0,[SP, #+40]
     33            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x900B             STR      R0,[SP, #+44]
     34            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x900C             STR      R0,[SP, #+48]
     35            RCC_OscInitStruct.LSIState = RCC_LSI_ON;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x900D             STR      R0,[SP, #+52]
     36            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9011             STR      R0,[SP, #+68]
     37            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9012             STR      R0,[SP, #+72]
     38            RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
   \   00000048   0xF45F 0x2080      MOVS     R0,#+262144
   \   0000004C   0x9013             STR      R0,[SP, #+76]
     39            RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
   \   0000004E   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000052   0x9014             STR      R0,[SP, #+80]
     40            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000054   0xA808             ADD      R0,SP,#+32
   \   00000056   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD001             BEQ.N    ??ClockInit_1
     41            {
     42              //Error_Handler();
     43              return false;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xE02F             B.N      ??ClockInit_2
     44            }
     45          
     46            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
     47                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??ClockInit_1: (+1)
   \   00000062   0x200F             MOVS     R0,#+15
   \   00000064   0x9003             STR      R0,[SP, #+12]
     48            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0x9004             STR      R0,[SP, #+16]
     49            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9005             STR      R0,[SP, #+20]
     50            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9006             STR      R0,[SP, #+24]
     51            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9007             STR      R0,[SP, #+28]
     52            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0xA803             ADD      R0,SP,#+12
   \   0000007A   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD001             BEQ.N    ??ClockInit_3
     53            {
     54              //Error_Handler();
     55              return false;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xE01D             B.N      ??ClockInit_2
     56            }
     57          
     58            PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
   \                     ??ClockInit_3: (+1)
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x9001             STR      R0,[SP, #+4]
     59            PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
   \   0000008A   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000008E   0x9002             STR      R0,[SP, #+8]
     60            if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
   \   00000090   0xA801             ADD      R0,SP,#+4
   \   00000092   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD001             BEQ.N    ??ClockInit_4
     61            {
     62              //Error_Handler();
     63              return false;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0xE011             B.N      ??ClockInit_2
     64            }
     65          
     66            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??ClockInit_4: (+1)
   \   0000009E   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   000000A2   0xF44F 0x717A      MOV      R1,#+1000
   \   000000A6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000AA   0x.... 0x....      BL       HAL_SYSTICK_Config
     67          
     68            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   000000AE   0x2004             MOVS     R0,#+4
   \   000000B0   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
     69          
     70            /* SysTick_IRQn interrupt configuration */
     71            HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x210F             MOVS     R1,#+15
   \   000000B8   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000BC   0x.... 0x....      BL       HAL_NVIC_SetPriority
     72            
     73            return true;
   \   000000C0   0x2001             MOVS     R0,#+1
   \                     ??ClockInit_2: (+1)
   \   000000C2   0xB015             ADD      SP,SP,#+84
   \   000000C4   0xBD00             POP      {PC}             ;; return
   \   000000C6   0xBF00             Nop      
   \                     ??ClockInit_0:
   \   000000C8   0x40023824         DC32     0x40023824
   \   000000CC   0x40007000         DC32     0x40007000
     74          }
     75          
     76          
     77          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   ClockInit
        88   -> HAL_NVIC_SetPriority
        88   -> HAL_RCCEx_PeriphCLKConfig
        88   -> HAL_RCC_ClockConfig
        88   -> HAL_RCC_GetHCLKFreq
        88   -> HAL_RCC_OscConfig
        88   -> HAL_SYSTICK_CLKSourceConfig
        88   -> HAL_SYSTICK_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     208  ClockInit

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
